name: 🚀 Deploy to Coolify

on:
  push:
    branches: 
      - main
      - production
  pull_request:
    branches: 
      - main

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Tests
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linter
        run: npm run lint || true
        
      - name: Run tests
        run: npm test -- --coverage --watchAll=false
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # Build and Push Docker Image
  build:
    name: 🏗️ Build & Push
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            REACT_APP_SUPABASE_URL=${{ secrets.REACT_APP_SUPABASE_URL }}
            REACT_APP_SUPABASE_ANON_KEY=${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}
            REACT_APP_SUPER_ADMIN_SETUP_TOKEN=${{ secrets.REACT_APP_SUPER_ADMIN_SETUP_TOKEN }}
            REACT_APP_PAYPAL_CLIENT_ID=${{ secrets.REACT_APP_PAYPAL_CLIENT_ID }}
            REACT_APP_PAYPAL_MODE=production
            REACT_APP_ENVIRONMENT=production
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Output image
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  # Deploy to Coolify
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to Coolify
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ secrets.COOLIFY_WEBHOOK_URL }}'
          method: 'POST'
          timeout: 60000
          data: |
            {
              "image": "${{ needs.build.outputs.image }}",
              "tag": "latest"
            }
          customHeaders: |
            {
              "Authorization": "Bearer ${{ secrets.COOLIFY_TOKEN }}",
              "Content-Type": "application/json"
            }
            
      - name: Wait for deployment
        run: sleep 30
        
      - name: Health check
        run: |
          for i in {1..10}; do
            if curl -f -s https://skateboard.bamboy.de/health; then
              echo "✅ Health check passed"
              exit 0
            fi
            echo "⏳ Waiting for deployment... ($i/10)"
            sleep 30
          done
          echo "❌ Health check failed"
          exit 1

  # Staging Deployment (for PRs)
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    environment: staging
    
    steps:
      - name: Deploy to Staging
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ secrets.COOLIFY_STAGING_WEBHOOK_URL }}'
          method: 'POST'
          timeout: 60000
          data: |
            {
              "image": "${{ needs.build.outputs.image }}",
              "tag": "pr-${{ github.event.number }}"
            }
          customHeaders: |
            {
              "Authorization": "Bearer ${{ secrets.COOLIFY_TOKEN }}",
              "Content-Type": "application/json"
            }
            
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Staging deployment completed!\n\n' +
                    '📱 Preview: https://staging-skateboard.bamboy.de\n' +
                    '🔗 Image: `${{ needs.build.outputs.image }}`\n' +
                    '🏷️ Tag: `pr-${{ github.event.number }}`'
            })

  # Cleanup old images
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: Delete old images
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'skateboard-contest-app'
          package-type: 'container'
          min-versions-to-keep: 5
          delete-only-untagged-versions: true